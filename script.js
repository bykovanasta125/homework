 'use strict';
/* 1. 'number' + 3 + 3

Спочатку конкатенується рядок 'number' і число 3, отримуємо 'number3'.
Потім конкатенуємо результат з числом 3, отримуємо 'number33'.
2. null + 3

null у цьому контексті перетворюється в число 0.
Додаємо 3 до 0, отримуємо 3.
3. 5 && "qwerty"

Оператор && видає значення останнього операнду, який використовується для обчислення. Тут "qwerty" - це останній операнд.
Результат цього виразу - "qwerty".
4. +'40' + +'2' + "hillel"

У цьому виразі ми використовуємо унарний плюс (+) для перетворення рядків '40' та '2' у числа 40 і 2 відповідно.
Потім додаємо ці числа разом, отримуємо 42.
Конкатенуємо результат з рядком "hillel", отримуємо "42hillel".
5. '10' - 5 === 6

Спочатку рядок '10' перетворюється в число 10.
Вираховуємо 10 - 5, отримуємо 5.
Порівнюємо результат з числом 6. Результат цього порівняння - false.
6. true + false

Логічні значення true та false перетворюються в числа 1 та 0 відповідно.
Додаємо 1 і 0, отримуємо 1.
7. '4px' - 3

Рядок '4px' не можна просто відняти від числа, тому результат буде NaN (NotaNumber).
8. '4' - 3

Рядок '4' перетворюється в число 4.
Віднімаємо 3 від 4, отримуємо 1.
9. '6' + 3 ** 0

Значення 3 ** 0 дорівнює 1.Піднесення числа до ступеня 0 завжди дорівнює 1, тому 3 ** 0 дорівнює 1.
Рядок '6' конкатенується з числом 1, отримуємо '61'.
10. 12 / '6'

Рядок '6' перетворюється в число 6.
Ділимо 12 на 6, отримуємо 2.
11. '10' + (5 === 6)

Вираз 5 === 6 видає false.
Рядок '10' конкатенується з false, отримуємо '10false'.
12. null == ''

null не рівний рядку '', але в цьому виразі ми використовуємо оператор ==, який виконує автоматичне перетворення типів.
null перетворюється в 0, а пустий рядок '' також перетворюється в 0.
Таким чином, вираз є істинним, і результат - true.
13. 3 ** (9 / 3)

Спочатку обчислюємо вираз у дужках: 9 / 3 дорівнює 3.
Потім підносимо 3 до ступеня 3, отримуємо 27.
14. !!'false' == !!'true'

!! - це два унарні оператори NOT, які перетворюють значення на булевий тип.
'false' перетворюється в true, а 'true' перетворюється в true.
Порівнюємо два true, результат - true.
15. 0 || '0' && 1

Оператор || повертає перший істинний операнд або останній операнд, якщо обидва хибні.
'0' перетворюється в true.
0 || true - результатом є true.
Оператор && повертає останній істинний операнд.
Результат - 1.
16. (+null == false) < 1

null перетворюється в 0.
Порівнюємо 0 і false. false теж перетворюється в 0.
Вираз стає 0 < 1, що є істинним, і результат - true.
17. false && true || true:

Спочатку обчислюється false && true, де && - логічний оператор "і". Результатом цього виразу є false, оскільки обидва операнди мають бути істинними для отримання істини.
Далі ми маємо false || true, де || - логічний оператор "або". Результатом цього виразу є true, оскільки достатньо, щоб один з операндів був істинним, щоб отримати істину.
Отже, результатом всього виразу є true.
18. false && (false || true):

Спочатку обчислюється false || true, де || - логічний оператор "або". Результатом цього виразу є true, оскільки один з операндів є істинним.
Потім ми маємо false && true, де && - логічний оператор "і". Однак один із операндів, false, є хибним, тому результатом цього виразу є false.
19. (+null == false) < 1 ** 5:

Спочатку обчислюється +null. null перетворюється в число 0.
Порівнюється 0 == false. Оператор == порівнює значення без врахування типу. false також перетворюється в число 0.
Отже, результатом порівняння 0 == 0 є true.
Далі ми маємо 1 ** 5, що рівне 1, оскільки будь-яке число, піднесене до ступеня 1, залишається незмінним.
 Ми маємо вираз true < 1, де < - оператор "менше". Оскільки true перетворюється в число 1, то порівнюємо 1 < 1, що є false.
*/